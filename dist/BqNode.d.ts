import { Dictionary } from "ts-essentials";
import { DomController } from "./DomController";
import { Effect } from "./Effect";
import { State } from "./State";
export declare type NodeCreator = () => BqNode;
export declare type NodeChildrenCreator = () => NodeCreator[];
export declare type NodeChildren = NodeCreator[] | NodeChildrenCreator;
export declare type AttributeType = string | number | boolean | null | undefined;
export declare type AttributeGetter = () => AttributeType;
export declare type AttributeValue = AttributeType | AttributeGetter;
export declare const effectStack: Effect[];
export declare class BqNode extends DomController {
    tag: string;
    attributes: Dictionary<any>;
    static currentNode?: BqNode;
    static create(tag: string, attributes?: Dictionary<any>, children?: NodeChildren): () => BqNode;
    parent?: BqNode;
    element?: HTMLElement;
    isFirstRender: boolean;
    private __attributeState;
    private __changedStates;
    private __boundEffects;
    private __changedAttributes;
    private __childNodeList?;
    private __doSetStaticAttributes;
    private __dynamicAttributes;
    private __doRenderDom;
    private __mountingElement?;
    constructor(tag: string, attributes: Dictionary<any>, children?: NodeChildren, boundEffects?: Effect[]);
    get html(): string;
    private get __parentElement();
    private get __shouldRemove();
    private get __shouldAppend();
    mount(element: HTMLElement): void;
    renderDom(): HTMLElement;
    updateDom(): void;
    onStateChange(state: State<unknown>): void;
    private __setElementAttributes;
    private __setAttributeState;
    private __isDynamicAttribute;
    private __getHtmlAttributeName;
}
